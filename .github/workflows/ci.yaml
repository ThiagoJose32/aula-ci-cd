name: CI

on:
  push:
    branches:
        - master
  pull_request:
    branches:
        - master

jobs:
    build:
        name: 'Build and Push.'
        runs-on: ${{ matrix.os }}

        outputs:
          docker_tag: ${{ steps.generate_tag.outputs.sha }}

        strategy:
            matrix:
                node-version: [22]
                os: [ubuntu-latest]
        
        steps:
            - name: Checkout source code
              uses: actions/checkout@v4

            - name: Setup NodeJs
              uses: actions/setup-node@v4
              with:
                node-version: ${{ matrix.node-version }}
                cache: 'yarn'
            
            - name: Install dependencies
              run: yarn
            
            - name: Running Tests
              run: yarn test

            - name: Generate Tag
              id: generate_tag
              run: |
                SHA=$(echo $GITHUB_SHA | head -c7)
                echo "sha=$SHA" >> $GITHUB_OUTPUT

            - name: Login into the Container Registry
              uses: docker/login-action@v3
              with:
                username: ${{ secrets.DOCKERHUB_USERNAME }}
                password: ${{ secrets.DOCKERHUB_TOKEN }}
            
            - name: Build Docker Image
              run: docker build -t tjos1/aula_docker_devops:${{ steps.generate_tag.outputs.sha}} . 

            - name: Push Docker Image to DockerHub
              run: docker push tjos1/aula_docker_devops:${{ steps.generate_tag.outputs.sha}}
    
    deploy:
      name: Deploy on AWS.
      runs-on: ubuntu-latest
      needs: build

      steps:
        - name: Checkout source code
          uses: actions/checkout@v4

        - name: Copy docker-compose file via ssh
          uses: appleboy/scp-action@v0.1.7
          with:
            host: ${{ secrets.HOST }}
            username: ${{ secrets.USER }}
            password: ${{ secrets.PASSWORD }}
            source: "./docker-compose.yaml"
            target: "~/"

        - name: Deploy on AWS via ssh 
          uses: appleboy/ssh-action@v0.1.3
          with:
            host: ${{ secrets.HOST }}
            username: ${{ secrets.USER }}
            key: ${{ secrets.SSH_PRIVATE_KEY }}
            #password: ${{ secrets.PASSWORD }}
            script: |
              # Extract the tag on job build
              TAG=${{ needs.build.outputs.docker_tag }}
              # Create env file
              [ -e .env ] && rm .env
              touch .env
              echo  "DOCKER_IMAGE_TAG=$TAG" > .env
              # Login Docker
              docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_TOKEN }}
              #Stop Containers
              CONTAINERS=$(docker ps -q)
              if [ -n "$CONTAINERS" ]; then
                docker stop $CONTAINERS
              else
                echo " No running containers"
              fi
              #Remove Old Containers
              CONTAINERS=$(docker ps -a -q)
              if [ -n "$CONTAINERS" ]; then
                docker rm $CONTAINERS
              else
                echo " No containers to remove"
              fi
              #Run a new container from a new image
              docker-compose up -d --build

